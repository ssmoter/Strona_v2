@using Strona_v2.Client.Data.File.Upload
@*@attribute [Authorize]*@

@inject ILogger<UploadFile> _logger;
@inject IUploadFileApi _fileApi;
@inject ToastService _toast;


<div class="upload-css">
    <div>
        @if (uploadFile.Error != null)
        {
            @for (int i = 0; i < uploadFile.Error.TableBool.Count(); i++)
            {
                @if (!uploadFile.Error.TableBool[i])
                {
                    <div class="blazor-error-boundary">
                        <p>Nr pliku: @i posiada błąd: </p>
                        <p>@uploadFile.Error.TableString[i]</p>
                    </div>
                }
            }
        }
    </div>
    <div>
        <h3>Schemat</h3>
        <div>
            <label>
                Plik:<br />
                <InputFile OnChange="Preview" multiple></InputFile>
            </label>
        </div>
        <EditForm Model="filePublic" OnValidSubmit="FileUpload">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                Tytuł:<br />
                <InputText class="form-control input-css" @bind-Value="@filePublic.Title"></InputText>
            </div>
            <div>
                Opis:<br />
                <InputTextArea class="form-control input-css" @bind-Value="@filePublic.Description"></InputTextArea>
            </div>
            <div>
                Tag:<br />
                <InputText class="form-control input-css" @bind-Value="@tag" @onkeydown="@CutTagKey"></InputText>
            </div>
            <button class="btn btn-success" type="submit">Prześlij</button>
        </EditForm>
        <button class="btn btn-info" @onclick="@ForcePrevie">Wymuś odświerzenie</button>

    </div>
</div>
<div class="upload-preview-css">
    <div class="" style="padding:10px;">
        <h3>Podgląd</h3>
        <div class="">
            <div>
                <h3 class="text-center">
                    @filePublic.Title
                </h3>
            </div>
            <div>
                <p>
                    @filePublic.Description
                </p>
            </div>
            <div>
                <p>
                    @if (filePublic.tagModels != null)
                    {
                        @foreach (var tag in filePublic.tagModels)
                        {
                            <a class="border border-1 border-dark">@tag.Value</a> <span>&nbsp;</span>
                        }
                    }
                </p>
            </div>
            <div class="text-center">
                @if (uploadFile.ImgDataUri != null && uploadFile.ImgDataUri.Count >= 1)
                {
                    <div class="col-auto">
                        @for (var i = 0; i < uploadFile.ImgDataUri.Count; i++)
                        {
                            int Iint = i;
                            <span @onclick="@(e=>ChangeImg(Iint))">
                                <img width="80" class="img-fluid" src="@uploadFile.ImgDataUri[i]" />
                            </span>
                        }
                    </div>
                    <div>
                        <span>
                            <img class="img-fluid" src="@uploadFile.ImgDataUri[ImgId] " />
                        </span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>





@code {
    private FileModelClient filePublic = new();//model obiektu
    private UploadFileBase uploadFile = new(); //model podlądu pliku

    private bool shouldRender = true;
    protected override bool ShouldRender() => shouldRender;
    protected async override Task OnParametersSetAsync()
    {
        filePublic.tagModels = new List<TagModelClient>();
    }


    public void ForcePrevie()
    {
        shouldRender = false;
        CutTag();
        shouldRender = true;
    }

    private static readonly string[] Toasts = new[]
                                                   {
        "Wysłano pliki",                  //0
        "Błąd przy wysyłaniu pliku" ,     //1
        "Podgląd nie dostępny",           //2
        "Mem Udostępniony",               //3
        "Coś poszło nie tak ponów próbe"  //4
    };

    //podgląd pliku
    private async Task Preview(InputFileChangeEventArgs InputFile)
    {
        uploadFile = new();
        shouldRender = false;

        uploadFile = new();
        uploadFile.MaxAllowedFiles = 5; //ilość plików
        uploadFile.SetMaxFileSizeMb(5); //wielkośc plików
        try
        {
            uploadFile.Error = new(uploadFile.SizeOfList(InputFile) + 1); //wielkość tablicy z błędami
            uploadFile.CheckAllowedFiles(InputFile);    //sprawdzenie ilości przesłanych plików
            uploadFile.CheckFileType(InputFile);        //sprawdzenie typów plików
            uploadFile.CheckFileSize(InputFile);        // sprawdzenie wielkości plików

            await uploadFile.CastToString(InputFile);   //podgląd

            shouldRender = true;
        }
        catch (Exception exce)
        {
            _toast.ShowToast(Toasts[2], ToastLevel.Error);
            _logger.LogError(exce.Message);
        }
    }


    //wysłanie pliku i modelu
    private async Task FileUpload()
    {

        FileModelClient modelPublic = new();
        modelPublic.Files = new();
        modelPublic.Title = filePublic.Title;
        modelPublic.Description = filePublic.Description;
        try
        {
            if (uploadFile.InputFileChange != null)
            {
                var resultImg = await _fileApi.PostFile(uploadFile.InputFileChange, _logger);

                modelPublic.Created = resultImg.Created;
                modelPublic.StoredFileName = resultImg.StoredFileName;
                modelPublic.Type = resultImg.Type;
                _toast.ShowToast(Toasts[0], ToastLevel.Info);
            }

            modelPublic.tagModels = filePublic.tagModels;
            var resultModel = await _fileApi.PostModel(modelPublic, _logger);

            if (resultModel)
            {
                _toast.ShowToast(Toasts[3], ToastLevel.Success);
                modelPublic = new();
                uploadFile.ImgDataUri = new();
                filePublic = new();
                filePublic.tagModels = new List<TagModelClient>();
                tag = string.Empty;
                StateHasChanged();
            }
            else
                _toast.ShowToast(Toasts[4], ToastLevel.Error);

        }
        catch (Exception exce)
        {
            _toast.ShowToast(Toasts[1], ToastLevel.Error);
            _logger.LogInformation(exce.Message);
        }
    }

    private int ImgId = 0;
    private void ChangeImg(int id)
    {
        ImgId = id;
    }
    private string tag = string.Empty;

    private void CutTagKey(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == " ")
        {
            CutTag();
        }
    }

    private void CutTag()
    {
        var listTag = tag.Split(" ");
        foreach (var tag in listTag)
        {
            if (filePublic.tagModels.Any(x => x.Value == tag))
            {
                continue;
            }
            filePublic.tagModels.Add(new() { Value = tag });
        }
        filePublic.tagModels.Remove(filePublic.tagModels.SingleOrDefault(x => x.Value == ""));
        StateHasChanged();
    }



}
