@using Strona_v2.Client.Data.File.Dowloand

@inject IAPIFileDowloand _IAPIFileDowloand
@inject ILogger<MainFile> _logger
@inject IApiUser _IApiUser;
@inject NavigationManager _Navigation

@if (_Model != null)
{
    <div>
        <div>
            <div>
                <UserNameLink ID="@_Model.UserId"></UserNameLink>
                <h3 class="text-css " @onclick="GoToCurrent">@_Model.Title</h3>
                <p>
                    @if (_Model.tagModels.Count > 0)
                    {
                        @foreach (var tag in _Model.tagModels)
                        {
                            <a href="/t/@tag.Value" class="border border-0 border-dark">@tag.Value</a>
                            <span>&nbsp;</span>
                        }
                    }
                </p>
                <span class="float-end"> <span>@_Model.NoLike</span> / <span>@_Model.UnLike</span></span>
                <p class="text-css " @onclick="GoToCurrent">@_Model.Description</p>
            </div>
            <div class="">
                @if (_Model.Files.Count - 1 > 1)
                {
                    <div class="img-previe-css">
                        @for (var i = 0; i < _Model.Files.Count - 1; i++)
                        {
                            int Iint = i;
                            <span class="" @onclick="@(e=>ChangeImg(Iint))">
                                <img class="" src="@(_IAPIFileDowloand.GetFileImg(_Model.UserId,_Model.Files[i].StoredFileName,_Model.Files[i].Type,_logger))" />
                            </span>
                        }
                    </div>
                    <br />
                }
                @if (@_Model.Files.Count - 1 > 0)
                {
                    <NavLink href="@CurrentString">
                        <span>
                            <img class="img-current-css" src="@(_IAPIFileDowloand.GetFileImg(_Model.UserId,_Model.Files[ImgId].StoredFileName,_Model.Files[ImgId].Type,_logger))" />
                        </span>
                    </NavLink>
                }
            </div>
        </div>
        <div class="button-group-css ">
            <span class="comment-css-main">
                <span>
                    <button class="btn button-css" @onclick="@ChangeStatusComment">@NameComment komentarze</button>
                </span>
            </span>
            <span class="">
                <button class="btn button-css">+1</button>
            </span>
            <span class="">
                <button class="btn button-css">-1</button>
            </span>
        </div>
        <div>
            @if (ShowComment)
            {
                <div class="comment-css-main">
                    <CommentFile _FileId=@_Id></CommentFile>
                </div>
            }
        </div>

    </div>
}
else
{
    <a>Loading ...</a>

}







@code {
    [Parameter]
    public string? _Id { get; set; }

    private UserPublic? _users { get; set; }

    private int ImgId = 0;
    private void ChangeImg(int id)
    {
        ImgId = id;
    }
    private string CurrentString = "/f/";

    private FileModelPublic? _Model;
    protected async override Task OnInitializedAsync()
    {
        _Model = await _IAPIFileDowloand.GetFileModel(_Id, _logger);
        _Model.Files = new();

        if (_Model != null)
        {
            CurrentString += _Model.Id;
            _Model.TrimNameTyp();
        }

        _users = new();
        await GetUserName(_Model.UserId);

    }
    private async Task GetUserName(string id)
    {
        var user = await _IApiUser.ProfileUserPublicID(id, _logger);
        if (user != null)
        {
            _users = user;
        }
        if (user == null)
        {
            UserPublic user1 = new()
                {
                    Name = "Brak Danych",
                    Id = "Brak Danych"
                };
            _users = user1;
        }
    }

    private void GoToCurrent()
    {
        _Navigation.NavigateTo(CurrentString);
    }

    private bool ShowComment { get; set; } = false;
    private string NameComment { get; set; } = "Pokaż";
    private void ChangeStatusComment()
    {
        ShowComment = !ShowComment;
        if (ShowComment)
        {
            NameComment = "Ukryj";
        }
        if (!ShowComment)
        {
            NameComment = "Pokaż";
        }
    }

}
