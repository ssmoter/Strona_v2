@page "/f/{Id}"

@inject IAPIFileDowloand _IAPIFileDowloand
@inject IAPIComment _IApiComment
@inject ILogger<CurrentFile> _logger
@inject ToastService _toastService
@inject IApiUser _IApiUser;
@inject ILocalStorageService _IlocalStorage


<div class="current-css">
    <div>
        @if (_modelPublic != null)
        {
            <div>
                <UserNameLink ID="@_modelPublic.UserId"></UserNameLink>
                <h3 class="text-css ">@_modelPublic.Title</h3>
                <span class="float-end"><span>@_modelPublic.NoLike</span> / <span>@_modelPublic.UnLike</span></span>
                <p class="text-css">@_modelPublic.Description</p>
            </div>
            <div>
                @if (_modelPublic.Files.Count - 1 > 0)
                {
                    @if (_modelPublic.Files.Count - 1 > 1)
                    {
                        <div class="img-previe-css">
                            @for (var i = 0; i < _modelPublic.Files.Count - 1; i++)
                            {
                                int Iint = i;
                                <span class="" @onclick="@(e=>ChangeImg(Iint))">
                                    <img src="@(_IAPIFileDowloand.GetFileImg(_modelPublic.UserId,_modelPublic.Files[i].StoredFileName,_modelPublic.Files[i].Type,_logger))" />
                                </span>
                            }
                        </div>
                    }
                    <div>
                        <div>
                            <img class="img-current-css" src="@(_IAPIFileDowloand.GetFileImg(_modelPublic.UserId,_modelPublic.Files[ImgId].StoredFileName,_modelPublic.Files[ImgId].Type,_logger))" />
                        </div>
                    </div>
                }
            </div>

        }
        else
        {
            <h3>Loading...</h3>
        }
        <div>
            <AuthorizeView Context="authContext">
                <Authorized>
                    <div>
                        <EditForm Context="formContext" Model="_newComment" OnSubmit="@SendComment">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="input-text-area-css">
                                <span>
                                    <InputTextArea @bind-Value="@_newComment.Comment" class="form-control input-css"></InputTextArea>
                                </span>
                            </div>
                            <button class="btn btn-primary" type="submit">Wyślij</button>
                        </EditForm>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
        <div>
            @if (_Comments != null)
            {
                <div class="button-group-css">
                    <span>
                        <button class="btn button-css" @onclick="@PopularComment">@PopularString</button>
                    </span>
                    <span>
                        <button class="btn button-css" @onclick="@TimeComment">@TimeString</button>
                    </span>
                </div>
                <div class="">
                    @for (var i = 0; i < _Comments.Count; i++)
                    {
                        <div class="border border-1 border-dark">
                            <p>
                                <UserNameLink ID="@_Comments[i].UserId"></UserNameLink>
                                <span>
                                    @*&nbsp; @_Comments[i].Like/*@
                                </span>
                                <span>
                                    @*@_Comments[i].UnLike*@
                                </span>
                            </p>
                            <p>@_Comments[i].Created.ToString("yyyy'-'MM'-'dd'/'HH':'mm':'ss")</p>
                            <p>@_Comments[i].Comment</p>
                        </div>
                    }
                </div>
            }
            else
            {
                <h6>Loading...</h6>
            }
        </div>
    </div>
</div>
<div class="ad-css">
    <div>
        Kiedyś reklamy
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }


    private FileModelPublic? _modelPublic;
    private List<CommentModelClient>? _Comments;
    private CommentModelClient? _newComment = new();
    private List<UserPublic>? _users { get; set; }
    private UserPublic? _user { get; set; }

    private int ImgId = 0;
    private void ChangeImg(int id)
    {
        ImgId = id;
    }

    private static readonly string[] Toasts = new[]
    {
        "Wysłano komentarz",                    //0
        "Coś poszło nie tak",                   //1
        "Nie możesz przesłać pustej wiadomości" //2
    };

    private async void SendComment()
    {
        if (string.IsNullOrEmpty(_newComment.Comment) || string.IsNullOrWhiteSpace(_newComment.Comment))
        {
            _toastService.ShowToast(Toasts[2], ToastLevel.Error);
        }
        else if (!string.IsNullOrEmpty(_newComment.Comment) || !string.IsNullOrWhiteSpace(_newComment.Comment))
        {
            _newComment.FileId = Id;
            var respons = await _IApiComment.SendComment(_newComment, _logger);

            if (respons)
            {
                await SuccsefulResponse();
            }
            if (!respons)
            {
                _toastService.ShowToast(Toasts[1], ToastLevel.Error);
            }
        }

    }

    private async Task SuccsefulResponse()
    {
        _newComment = new();
        _Comments = await _IApiComment.GetCommentAsync(Id, _logger);
        _users = new();
        foreach (var item in _Comments)
        {
            await GetUserName(item.UserId);
        }
        _toastService.ShowToast(Toasts[0], ToastLevel.Success);
        StateHasChanged();
    }


    private async Task GetUserNames(string id)
    {
        var user = await _IApiUser.ProfileUserPublicID(id, _logger);
        if (user != null)
        {
            _users.Add(user);
        }
        else
        {
            UserPublic user1 = new()
                {
                    Name = "Brak Danych",
                    Id = "Brak Danych"
                };
            _users.Add(user1);
        }
    }
    private async Task GetUserName(string id)
    {
        var user = await _IApiUser.ProfileUserPublicID(id, _logger);
        if (user != null)
        {
            _user = user;
        }
        else
        {
            UserPublic user1 = new()
                {
                    Name = "Brak Danych",
                    Id = "Brak Danych"
                };
            _user = user1;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        _modelPublic = await _IAPIFileDowloand.GetFileModel(Id, _logger);

        if (_modelPublic != null)
        {
            _modelPublic.Files = new();
            _modelPublic.TrimNameTyp();

            _user = new();
            await GetUserName(_modelPublic.UserId);

            _Comments = await _IApiComment.GetCommentAsync(Id, _logger);
            if (_Comments != null)
            {
                _users = new();
                foreach (var item in _Comments)
                {
                    await GetUserNames(item.UserId);
                }
                await GetChooseTypeOfSort();
            }
        }
    }

    //sortowanie według ilości like
    private static int CompareByNoLike(CommentModelClient model1, CommentModelClient model2)
    {
        return model1.Created.CompareTo(model2.Created);
    }
    private string PopularString = "Najlepsze";
    private int SortType = 0;
    private bool PopularCom = true;
    private async Task PopularComment()
    {
        if (_Comments != null)
        {
            if (PopularCom)
            {
                SortType = 1;
                PopularCom = !PopularCom;
                _Comments.Sort(CompareByNoLike);
                _Comments.Reverse();
                PopularString = "Najlepsze";
            }
            else if (!PopularCom)
            {
                SortType = 2;
                PopularCom = !PopularCom;
                _Comments.Sort(CompareByNoLike);
                PopularString = "Najgorsze";
            }
            await _IlocalStorage.SetItemAsync<int>(nameof(SortType), SortType);

        }
    }
    //


    //sortowanie po dacie
    private static int CompareByTime(CommentModelClient model1, CommentModelClient model2)
    {
        return model1.Created.CompareTo(model2.Created);
    }

    private string TimeString = "Najnowsze";
    private bool TimeCom = true;
    private async Task TimeComment()
    {
        if (_Comments != null)
        {
            if (TimeCom)
            {
                SortType = 3;
                TimeCom = !TimeCom;
                _Comments.Sort(CompareByTime);
                _Comments.Reverse();
                TimeString = "Najnowsze";
            }
            else if (!TimeCom)
            {
                SortType = 4;
                TimeCom = !TimeCom;
                _Comments.Sort(CompareByTime);
                TimeString = "Najstarsze";
            }
            await _IlocalStorage.SetItemAsync<int>(nameof(SortType), SortType);
        }
    }
    //
    //pobieranie zapamiętanego sposobu sortowania
    private async Task GetChooseTypeOfSort()
    {
        SortType = await _IlocalStorage.GetItemAsync<int>(nameof(SortType));

        switch (SortType)
        {
            case 1:
                PopularCom = !PopularCom;
                _Comments.Sort(CompareByNoLike);
                _Comments.Reverse();
                PopularString = "Najlepsze";
                break;
            case 2:
                PopularCom = !PopularCom;
                _Comments.Sort(CompareByNoLike);
                PopularString = "Najgorsze";
                break;
            case 3:
                TimeCom = !TimeCom;
                _Comments.Sort(CompareByTime);
                _Comments.Reverse();
                TimeString = "Najnowsze";
                break;
            case 4:
                TimeCom = !TimeCom;
                _Comments.Sort(CompareByTime);
                TimeString = "Najstarsze";
                break;
            default:
                break;
        }
    }
}